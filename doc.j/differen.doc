/* vi:set tw=70 sw=2 ts=2 et: */
＃これは vim 2.0 の difference.doc を川藤＠アンリツ
＃（kawafuji@acdpe0.anritu.co.jp）他有志が意訳したものです。原文にはあまり忠
＃実ではありません ;-) 。間違っている部分もあるかも知れません。気が付いた方は
＃川藤までご一報頂けると幸いです。
＃
＃この文章に関する著作権等は一切放棄します。また、この訳によって生じた一切の
＃利益・不利益に関しての責任も持ちません。

＃このドキュメントは、土田 (ken_t@st.rim.or.jp) が上記のドキュメントを
＃元に vim 3.0 の difference.doc 対応に意訳したものです。
＃きっと間違っている部分がありますが、ご容赦を。
＃この文章に関する著作権等は一切放棄します。また、この訳によって生じた一切の
＃利益・不利益に関しての責任も持ちません。

  VIM と vi の違いの要約です。完全ではないので、 reference.doc と {}
内のコメントを見てください。


主な追加機能：

vi との互換性
  オプション 'compatible' をセットすると、すべてのオプションの値は vi
互換になるように設定される。vim はできるだけ「本物の」vi と同じように
振舞う。


多段 undo
  'u' で遡り（undo）、'ctrl-R' で戻る（redo）。オプション 'undolevels'
に undo できる数をセットできる（デフォルトは 100）。'undolevels' を 0
にすると、vi 互換の一段 undo になる。
＃訳注：原文では 'undolines' となっているが、間違いだろう。

マルチウインドウ／マルチバッファ
  Vim はそれぞれのウインドウを分割して異なるバッファか同じバッファの異
なる場所を編集する事ができます。
  この機能の為に多くのコマンドやオプションが追加されていますので、
windows.doc を見てください。


コマンドの繰返し
  'q'<c> で入力した文字の記録を名前つきレジスタ <c> に記録し始める（レ
ジスタの名前が大文字の場合は追加）。次の 'q' で記録を終える。バッファ
の内容を '@'<c> で実行することができる。これは複雑な動作の場合に有効で
ある。


柔軟な挿入モード
  挿入モードでも矢印キーによってカーソルを移動できる。これによって
undo/redo の単位となる挿入は二つに分割される。
  挿入モードでコマンドモードのコマンドを実行するには CTRL-O を使う。こ
れは、ESCを押して、コマンドを実行し、'a' を押したこととほぼ同じである。
これによってundo/redo の単位となる挿入は二つに分割される。


ビジュアルモード
  「ビジュアルモード」を使えば、テキストの一部を選択してから（何らかの
動作を行う）コマンドを入力できる。これは、まずコマンドを入力して次に
それがおよぶ範囲まで移動する、ということの別の（簡単な）やり方である。
  'v' と 'V' でビジュアルモードの始めを指定する。'v' は文字に対して作
用し、'V' は行に対して作用する。
  カーソルを移動させれば、ビジュアルモードの対象範囲が拡大される。これ
は高輝度（または反転）で示される。'o' で囲みの反対側に移動できる。
  ビジュアルモードは次のコマンドに対して有効である：

        d       削除
        c       変更
        y       ヤンク
        > と <  インデントの挿入／削除
        !       外部コマンドによるフィルタ
        =       indent コマンドに通す
        :       : によるコマンド
        Q       'textwidth' 桁への整形
        J       行の結合
        ~       大文字・小文字変換
        u       小文字へ変換
        U       大文字へ変換


ブロック指定
  テキストを長方形のブロックに囲むことができる。CTRL-V で囲み始めを指
定する。このブロックに対しては、削除（'d'）、ヤンク（'y'）、大文字小文
字変換（'~', 'u', 'U'）を行うことができる。削除やヤンクしたブロックは
'p' や 'P' コマンドでペーストできる。


オンラインヘルプ
  ':help' コマンドか help キー（MSDOS なら F1）で数ページの簡易なヘル
プを表示する。オプション 'helpfile' でヘルプファイルを指定できる。


コマンド行の編集
  カーソルキーでコマンド行の任意の位置に挿入／削除できる。左／右のカー
ソルキーは前／後に一文字ずつ移動する。シフトキーを押しながらの左／右の
カーソルキーは前／後に一語ずつ移動する。CTRL-B/CTRL-E でコマンドライン
の先頭／最後に移動することができる。
  コマンド行は記憶されている。上／下のカーソルキーで過去のコマンド行を
呼び出すことができる。オプション 'history' で記憶しておくコマンド行の
数を指定できる。


コマンド行補完
  （画面の最下行で）コマンド行を編集しているとき、 <TAB> を入力する事
によって補完が行われる。

     what         example         where
  - a command     :e<TAB>         at start of command line
  - a tag         :ta no<TAB>     after :ta
  - an option     :set sc<TAB>    after :set
  - a filename    :e v<TAB>       after any command that accepts a filename

  複数にマッチする場合、CTRL-N（次）と CTRL-P（前）でマッチするものを
順に表示する。
  オプション 'wildchar' によってファイル名補完を開始する文字を指定でき
る。デフォルトは <TAB> である。ワイルドカードを使用した（不完全な）補
完の後で CTRL-D を入力すると一覧が表示される。 CTRL-A ではすべてが挿入
される。CTRL-L は共通な部分までを挿入する。


水平スクロール
  オプション 'wrap' をオフにしておくと、長い行は折り返されず一部だけが
表示される。カーソルが表示されていない部分に移動すると、画面は水平方向
にスクロールする。スクロールの最小単位はオプション 'sidescroll' で指定
できる。


テキストの整形
  オプション 'textwidth'（tw）で一行の長さを制限できる。これは vi の
（あまり使い勝手のよくない）オプション 'wrapmargin' を補助するものであ
る。'Q' コマンドでテキストの一部を整形することができる（"Q}" は１パラ
グラフを整形する）。コマンド ":center", ":left", ":right" でテキストを
整列させることができる。


エディット−コンパイル−エディットの高速化
  コマンド ":make" はコンパイラを起動し、最初のエラーにジャンプする。
別の方法としては、オプション "-e" を付けて vim をコンパイラから起動す
る。コンパイラからのエラーメッセージのファイルは解釈される。エラーファ
イルの各行はファイル名、行番号、エラーメッセージを調べるためにスキャン
される。vim は最初のエラーからエディットを開始する。エラーファイル名は
"-e errorfile" として与えることもできる。コマンド ":cn" は次のエラーに
ジャンプする。":cl" はすべてのエラーメッセージを表示する。他にも利用可
能なコマンドがある（Manxの Z エディタとほぼ同様である）。オプション
'errorfile' がエラーメッセージのファイル名である。オプション
'errorformat' に、さまざまなコンパイラからのエラーメッセージを扱うため
の文字列を scanf ライクに設定できる。オプション 'makeprg' にはコマンド
":make" で実行するプログラムの名前を設定する。 'shellpipe' オプション
にコンパイラの出力を errfile にリダイレクトする際の文字列を指定できる。


起動オプション：

  "-v"（View）を付けて vim を起動するとリードオンリモードになる（"-n"
を含む）。

  "-b" (Binary) を付けて vim を起動すると、バイナリファイルや実行形式の
ファイルをエディットできるように、いくつかのオプションがセットされる。

  "-s scriptfile" を付けて vim を起動すると "scriptfile" を読み込み、そ
の内容をキーボードから入力した場合と同様に振舞う。エディタを終了する前
にファイルが終了すると、コンソールから続きを読む。

  オプション "-w" で入力したすべての文字をスクリプトファイルに記録する。
このファイルは、他のファイルの編集に利用したり、スクリプトファイルを変
更して再編集に用いることができる。

  オプション "-n" は ".swp" ファイルを作らないことを指定する（この先参
照）。

  オプション "-c command" はオプション "+command" と同じ。

  オプション "-T terminal" は端末のタイプを指定する。

  オプション "-e" は vim を quickfix モードで起動する。

  オプション "-o" はオープンするウインドウの数を指定する。 "-o4" とす
ると４つのウインドウがオープンする。


コマンドモード：

  次のコマンドがない：'Q'（ex モードへの移行）。
  次の ex コマンドがない：append, change, insert, open, recover, z 。

  コマンドの文字が最下行に表示される。コマンドが終了すると、これは消え
る。これを表示したくない場合は、オプション 'showcmd' をリセットすれば
よい。

  オプション 'ruler' をセットすると、カーソルの現在位置を最下行に表示
する。

  'u' と CTRL-R で undo/redo の回数指定ができる。

  'U' は、最後に変更した行から移動した後でも、また 'u' の後でも働く。

  ヌルは内部的に <LF> に置き換えられる。これは、バイナリファイルのエディ
ットを（多少なりとも）可能にする。

  8 bit 目がセットされている文字を表示する。オプション 'graphic' をセッ
トしていなければ '~' から 0xa0 までの文字は "~?", "~@", "~A" 等のよう
に表示する。

  コマンド '=' はテキストをフィルタコマンドに通す（vi では lisp 用）。
フィルタコマンド名はオプション 'equalprg' で指定できる。デフォルトは
"indent" 。

  '][' は次の C の関数の終り（第一カラムが '}'）に移動する。
  '[]' は前の C の関数の終り（第一カラムが '}'）に移動する。

  ']f', '[f', 'gf' はカーソル位置のファイルの編集を開始する。 CTRL-W
では、ウインドウ分割をしてカーソル位置のファイルの編集を開始する。

  '*' は現在カーソルがある単語を前方に検索する。'#' は後方に検索する。
  'K' は現在カーソルがある単語を引数として、オプション 'keywordprg' で
指定されたプログラムを実行する。

  '%' の前に数字を付けて、ファイルのその割合の位置に移動できる。マッチ
する括弧にジャンプする通常の '%' は、引用符中の括弧をスキップする。

  コマンド CTRL-] で、カーソルは識別子の途中にあってもよい。

  使用したタグは記憶される。記憶したタグ（タグスタック）を利用するコマ
ンドは、 CTRL-T, ':pop', ':tag' である。':tags' はタグスタックの一覧を
表示する。

  オプション 'tags' には、タグファイル名のリストを指定できる。つまり、
複数のタグファイルを使用することができる。

  以前に扱ったファイル名はファイル名リストに記憶されている。CTRL-^ に
は回数が指定でき、その値はリスト中の位置を示す。

  検索パターンがより多くの機能を持っている。 <NL> 文字を検索パターンと
":s" の置換文字列に含む事ができる。 vi ではコマンドの終了を示す。

  検索ではマッチしたテキストの末尾に移動でき、移動先から前後へのオフセッ
トも指定できる。

  '~', ':next', ':Next', 'n', 'N' に回数を指定することができる。

  ":next!" コマンドは、 'autowrite' オプションが設定されている場合ファ
イルに書き込まない。 vi では、書き込みを行うが、 ':rewind!' では当然の
ことながら書き込まないので vi のバグと考えられる。

  "5r<CR>" は五文字を五つの改行に置き換える。vi の場合は五文字を一つの
改行に置き換える。

  コマンド ':wnext' の追加。これは、':write' に続けて ':next' を行った
のと同じ。

  ":w!" コマンドは、ライトプロテクトが設定されていても常に書き込みを行
う。

  オプション 'tildeop' をセットすると、'~' はオペレータとして機能する
（移動コマンドを続ける必要がある）。

  コマンド 'J' (join) を使うとき、オプション 'joinspaces' (js) をリセッ
トしておくと、ピリオドの後に空白を一つだけ付ける（vi は二つ付ける）。

  'cw' が複数のホワイトスペースに対して有効である（vi では、'cw' は一
つの空白だけを変更するが、'dw' はすべてのホワイトスペースを削除する）。

  'o' と 'O' に回数指定ができる（vi では指定を無視する）。

  コマンド ':dis' でヤンクレジスタの内容を表示する。

  これまでに扱ったファイル名を記憶している。
  コマンド ":files" でその一覧を表示する。
  '#'<N> でその一覧の <N> 番目のものに置き換わる。
  "#<" は現在のファイル名から拡張子を取り除いたものに置き換わる。

  ex コマンドの後に指定するフラグはサポートしていない（その予定もない）。

  非 UNIX システムでは、コマンド ":cd" はホームディレクトリに行くので
はなく、現在ディレクトリを表示する。":pwd" ならどのシステムでも現在ディ
レクトリを表示する。

  コマンド ':source!' で vi のコマンドをファイルから読み込む。

  コマンド ':mkexrc' で変更のあったオプションとマップをファイル ".exrc"
に書き出す。':mkvimrc' なら ".vimrc" に書き出す。

  マップでは末尾再帰定義をチェックしていない。":map! foo ^]foo" のよう
な定義が可能である。

  コマンド ':put!' でレジスタの内容を現在行の上に書き出す。

  名前付レジスタ '.' はコマンド p, P, ":put" で使用できる。このレジス
タの内容は最後に挿入したテキストである。

  'p' と 'P' コマンドは vi では行が無い場合 '.' で繰り返す事ができない。
しかし、 vim ではいつでも繰り返せる。

  コマンド ":noremap" で、再マップが行われないマッピングを設定できる。
これは二つのキーの意味を入れ替えるときに便利である。":cmap", ":cunmap"
および":cnoremap" はコマンドラインの編集の場合にだけ使えるマッピングを
行う。":imap", ":iunmap" および ":inoremap" は挿入モードの場合にだけ使
えるマッピングを行う。同様の短縮形コマンドとして、":noreabbrev",
":iabbrev", ":cabbrev",":iunabbrev", ":cunabbrev", ":inoreabbrev",
":cnoreabbrev" がある。

  vi では、コマンド ":map foo bar" は以前のマッピング ":map bug foo"
を削除する。これはバグであると考えられるので、vim には実装していない。
アンマップは非常に難しいので、":unmap! foo" は ":map! bug foo"を削除す
る（これは viと同様）。

  コマンド ':@r' は、レジスタ r を実行する（vi でもサポートしているバー
ジョンがある）。

  ':' レジスタは、最後のコマンドラインの内容が設定される。
  '%' レジスタは、現在のファイル名が設定される。

  CTRL-O/CTRL-I で旧／新ポジションにジャンプできる。これはコマンド ''
で移動するのと同じであるが、飛び先が他のファイルでもよい。コマンド
':jumps' でポジションの一覧を表示する。

  オプション 'shiftround' をセットすると、コマンド '>' と '<' でインデ
ント量を'shiftwidth' の整数倍に丸めることができる。

  オプション 'scrolljump' に、カーソルが画面から飛び出す場合にスクロー
ルさせる最小の行数を指定できる。スクロールが遅い場合に使うとよい。

  大文字のマークはファイルを越えてジャンプできる。コマンド ":marks" は
現在設定されているマークの一覧を表示する。コマンド "']" と "`]" は前の
オペレータの終了地点かコマンド put で挿入したテキストの終了地点にジャ
ンプする。"'[" と "`["は開始地点にジャンプする。

  オプション 'shelltype' には、利用するシェルのタイプを反映した値を設
定する。

  'highlight' オプショオンには、 highlight mode を使うそれぞれのコマン
ドを設定する。

  コマンド CTRL-A（加算）と CTRL-X（減算）を新規実装。これらのコマンド
に指定された回数（デフォルトは１）が、カーソル以降の数値に加えられる／
数値から減じられる。数値は十進法、八進法（'0' で始まる）、十六進法
（'0x' で始まる）であってよい。マクロでの使用に便利である。

  トグルオプションは頭に "inv" を付けてセットすると状態が反転する。

  vi でも vim でもコマンド ":substitute" で CTRL-M を使うことによって
改行を作ることができる。vi においては、これはテキストを真の CTRL-Mに置
換できないことを意味する。vim では CTRL-V を前置することによって真の
CTRL-M に置換することができる。


挿入モード：

  オプション 'revins' をセットすると逆向きに入力される。これはヘブライ
語の入力用である。通常の文字の入力ではカーソルは移動せず、テキストが右
に移動する。置換モードではカーソルが左に移動する。BS, CTRL-W, CTRL-U
もまた逆向きに動作する。CTRL-B でオプション 'revins' はトグルする。

  BS キーは CTRL-D のようにインデントを消す。

  オプション 'backspace' (bs) を非０に設定しておくと、CTRL-U や CTRL-W
で改行を越えて削除することができる。'backspace' を２に設定すると、挿入
開始位置を越えて削除できる。

  オプション 'paste' をセットすると、いくつかのオプションがリセットさ
れ、また挿入モードでのマッピングおよび短縮入力は無効になる。これによっ
て、ウィンドウシステム利用時に正常にペーストができるようになる。オプショ
ン 'paste'をリセットすると元の値に設定し直される。

  CTRL-T／CTRL-D は、カーソルがどこにあるかによらず、常にインデントの
挿入／削除を行う。

  CTRL-@（直前に挿入したテキストの挿入）はいつでも使える（vi: 最初の文
字としてしか使えない）。

  CTRL-A は CTRL-@ と同じように働くが、挿入モードを終了させない。

  CTRL-R <0-9a-z> はレジスタの内容を挿入する。

  オプション 'smartindent' (si) をセットすると、C のプログラムはよりよ
く自動インデントされる。

  CTRL-Y と CTRL-E はカーソルの上／下の文字をカーソル位置にコピーする。

  CTRL-V に続けて三桁の十進数を入れると、それに対応する一文字として入
力される。キーボードにない国際的な文字を入力するのに有効である。

  オプション 'expandtab' (et) をセットすると、TAB は適切な個数の空白に
展開される。

  画面は常にバッファの内容を反映している（vi はテキスト変更の場合など
は反映していない）。

  DIGRAPHS を定義して vim をコンパイルすると、digraph がサポートされる。
これは、通常の Amiga digraph を含む。digraph はコマンド ":digraph"で表
示される。追加は、":digraph {char1}{char2} {number}" のように行う。
digraphの入力は"CTRL-K {char1} {char2}" とする。また、オプション
"digraph" がセットされている場合は、"{char1} BS {char2}" でもよい。


コマンドラインモード：

  コマンドラインの入力を ESC で終了させると、そのコマンドは実行しない。
vi では実行するが、通常はそれは望まないことだろう（ESC を入力するとコ
マンドモードに戻るべきである）。内容がよくわからないマクロを実行しても
問題が起きないように、マクロ中のESCは（従来通り）そのコマンドを実行さ
せる。vi のようにESC でコマンドを実行するには次のようにすればよい。
        ":cmap ^V<ESC> ^V<CR>"


その他：

  以下のオプションをサポートしていない：
  autoprint (ap), beautify (bf), edcompatible, hardtabs (ht), lisp,
mesg, open, optimize (op), prompt, redraw, slowopen (slow), terse,
window, w300, w1200 and w9600。
オプションthese は設定できるが無視される。

  オプション 'compatible' をセットすると、すべてのオプションを最大限
vi 互換になるように設定する。

  オプション 'ttimeout' 。これは 'timeout' と似ているが、カーソルキー
およびファンクションキーだけに対して有効であり、通常のマップされた文字
には適用されない。オプション 'timoutlen' にミリ秒単位で待ち時間を設定
できる。オプション'esckeys' がセットされていないと、<ESC> から始まるカー
ソルキーとファンクションキーは挿入モードで認識されない。

  端末の画面制御文字列それぞれに対するオプションが用意されている。これ
らは termcap がサポートされていないか、または個々の文字列を変更したい
ときに使う。

  オプション 'textmode' をセットすると（MSDOS の場合のデフォルト）、
<CR><LF> が行末として扱われる。リセットすると（Unix や Amiga の場合の
デフォルト）、<LF> が行末になる。オプション 'textauto' をセットすると、
vim は最初の <LF> が現れるまで調べて行末コードを決める。オプション
'textmode' は適宜設定される。

  ジョブコントロールのできないシステム（BSD-UNIX を除くほとんどのシス
テム）では、CTRL-Z とコマンド ":stop", ":suspend" は新たなシェルを起動
する。

  Amiga 上で、出力用の対話ウィンドウなしに vim を起動すると、新たなウィ
ンドウが開かれる（':sh' も利用できる）。引数 "-d" でデバイスの指定がで
きる。例 "-d con:20/20/600/150"）。

  起動時に、環境変数 VIMINIT か EXINIT 、ファイル s:.vimrc か s:.exrc、
さらに.vimrc か .exrc を初期化コマンドとして読み込む。.vimrc や .exrc
から読む場合、いくつかのコマンドはセキュリティのために利用できない
（shell コマンドやファイル書き込みのコマンドを指す。また、:map コマン
ドはエコーされる）。これはオプション 'secure' によって無視することがで
きる。

  一行の長さは int の最大値まで（Amiga の場合は 32767桁、多くの 32-bit
マシンではそれ以上）。そのような行が常に編集できるわけではない。ファイ
ル全体では2147483646行まで。画面より長い行の場合、最後の行は <@>で埋め
られてその前の行までが表示される（オプション 'wrap' セットされている場
合）。

  オプション 'columns' で表示の幅を設定／表示できる。

  現在のファイル名がウィンドウのタイトルバーに表示される。

  ファイル名のワイルドカードは展開される。

  ファイルの先頭と末尾の数行からオプションの設定が読み込まれる。オプショ
ン 'modelines' で何行ほどその対象にするか指定する（デフォルトは５行）。
  注: vi のいくつかのバージョンでは、modeline でいかなる ex コマンドも
実行できる（これはセキュリティ上の重大な問題だ）が、vim は違う。

  （例えば .exrc で）オプション 'insertmode' が設定されると、vim は挿
入モードで起動する。

  テキストはすべてメモリに保持される。使用可能なメモリが扱えるファイル
サイズ（および undo 等）の限界である。これは MSDOS では問題になるだろ
うが、Amiga ではめったに問題になることはなく、UNIX ではまず問題になら
ない。

  オプション 'backup' や 'writebackup' がセットされると、ファイルに上
書きする前にバックアップファイル (.bak) が作られる。オプション "backup"
がセットされると、バックアップファイルは vim 終了後も残る。

  オプション 'binary' がセットされ、かつ、ファイルの最後に end-of-line
がない場合、書込み時に end-of-line は付加しない。

  vim は、 ".swp" という名前で終わるスワップファイルを作成する。このファ
イルを使う事で編集中にアボートした場合に "vim -r file" でそれまでに行っ
た事をリカバーする事ができる。オプション 'updatecount' を０にするか、
起動時に "-n" オプションを指定すると、これが機能しないようにできる。
'directory' オプションで、 .swp ファイルを置くディレクトリを指定できる。

  オプション 'shortname' (sn) がセットされると、".bak" と ".swp" ファ
イルの名前は MSDOS ライク（８文字＋３文字の拡張子）になる。MSDOS や
Amigaの crossdosファイルシステムでは、これを指定しておくべきである。こ
のオプションがセットされていない場合、vim は MSDOS のファイル名制限が
存在するかどうか調べようとする。

  クラッシュ後にリカバーが成功する可能性は低い。これは、テンポラリファ
イルがないためである。

  エラーメッセージは最低１秒間表示される（vi はエラーメッセージを上書
きする）。vim が "Hit RETURN to continue" とメッセージを出したときには、
どのキーをたたいても構わない。<CR>, <LF>, <SPACE> 以外のキーはコマンド
（の始まり）と解釈される（vi では ':' から始まるコマンドだけしか受け付
けない）。

  名前付きおよび名前なしレジスタの内容はファイルを替えても残る。

  Amiga の AUX: デバイスをサポートしている。



